# Build and test the backend package.

name: "Backend"

on:
  pull_request:
    branches: ["main", "staging", "dev"]
    paths-ignore:
      # Ignore changes in documentation.
      - "docs/**"
      - "README.md"

      # Ignore package.json changes.
      - "package.json"

      # Ignore changes in root directory.
      - ".gitattributes"
      - ".gitignore"
      - ".markdownlint.json"
      - ".yarnrc.yml"
      - "LICENSE"
      - "yarn.lock"
      - ".yarn"
      - ".vscode"

      # Ignore changes in .github directory.
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.*"

      # Ignore build related files.
      - ".env.example"

      # Ignore changes in frontend package.
      - "packages/frontend/**"

      # Ignore frontend package specific paths.
      - "packages/backend/static/**"
      - "packages/backend/.eslintrc"
      - "packages/backend/sanity.cli.ts"
      - "packages/backend/sanity.config.ts"
      - "packages/backend/schemaTypes/**"

  push:
    branches:
      ["main", "staging", "dev", "48-retrieve-yarn-version-from-packagejson"]
    paths-ignore:
      # Ignore changes in documentation.
      - "docs/**"
      - "README.md"

      # Ignore package.json changes.
      - "package.json"

      # Ignore changes in root directory.
      - ".gitattributes"
      - ".gitignore"
      - ".markdownlint.json"
      - ".yarnrc.yml"
      - "LICENSE"
      - "yarn.lock"
      - ".yarn"
      - ".vscode"

      # Ignore changes in .github directory.
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.*"

      # Ignore build related files.
      - ".env.example"

      # Ignore changes in frontend .
      - ".github/workflows/frontend.yml"
      - "packages/frontend/**"

      # Ignore backend package specific paths.
      - "packages/backend/static/**"
      - "packages/backend/.eslintrc"
      - "packages/backend/sanity.cli.ts"
      - "packages/backend/sanity.config.ts"
      - "packages/backend/schemaTypes/**"

jobs:
  # Sets the environment.
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      current_env: ${{ steps.set_env.outputs.current_env }}
    steps:
      - name: Check if production
        if: github.ref_name == 'production'
        run: |
          echo "ENVIRONMENT_NAME=production" >> $GITHUB_ENV
      - name: Check if staging
        if: github.ref_name == 'staging'
        run: |
          echo "ENVIRONMENT_NAME=staging" >> $GITHUB_ENV

      - name: Check if development
        if: github.ref_name == 'dev'
        run: |
          echo "ENVIRONMENT_NAME=development" >> $GITHUB_ENV

      # Original: https://magnussundstrom.se/blog/github-action-environment-check
      # Edited, due to: https://github.blog/changelog/2023-07-24-github-actions-update-on-save-state-and-set-output-commands/
      # Solution derived from: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-writing-an-environment-variable-to-github_env
      - name: Set environment
        id: set_env
        run: echo "current_env=${{ env.ENVIRONMENT_NAME }}" >> "$GITHUB_ENV"

  setup:
    runs-on: ubuntu-latest
    outputs:
      yarn_version: ${{ steps.set_yarn_version.outputs.yarn_version }}
    environment: ${{ needs.set-environment.outputs.current_env }}
    needs: set-environment
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      # Retrieve yarn version from package.json
      - name: Get yarn version
        run: |
          grep 'packageManager' package.json | awk -F: '{gsub(/[", ]/, "", $2); print $2}' | xargs -I {} echo "YARN_VERSION="{} >> $GITHUB_ENV

      # Set the yarn version by exporting to env var and output
      - name: Set yarn version
        id: set_yarn_version
        run: |
          echo "yarn_version=${{ env.YARN_VERSION }}" >> "$GITHUB_ENV"

        # Yarn installation
      - name: Enable corepack
        run: corepack enable

      - name: Install yarn
        run: corepack install --global ${{ env.YARN_VERSION }}

      - name: Set yarn version
        run: corepack use ${{ env.YARN_VERSION }}

      - name: Install dependencies
        run: yarn --immutable

        # Cache dependencies.
        # Retrieved from: https://github.com/actions/cache/blob/main/examples.md#node---yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

  test:
    runs-on: ubuntu-latest
    # Maybe can also use:
    # https://github.com/orgs/community/discussions/56123#discussioncomment-5968189
    environment: ${{ needs.set-environment.outputs.current_env }}
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      # Yarn installation
      - name: Enable corepack
        run: corepack enable

      - name: Install yarn
        run: corepack install --global ${{ needs.setup.outputs.yarn_version }}

      - name: Set yarn version
        run: corepack use ${{ needs.setup.outputs.yarn_version }}

        # ============================================== #
        # Retrieve cached dependencies from previous job #
        # ============================================== #

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

        # ============================================== #
        # ############################################## #
        # ============================================== #

      # Run unit tests
      - name: Run backend tests
        run: yarn test-ci:back

  # deploys to Sanity, using:
  # https://github.com/sanity-io/github-action-sanity
  # deploy:
  #   runs-on: ubuntu-latest

  #   # ifx: github.ref_name == 'main' || github.ref_name == 'staging'
  #   if: github.ref_name == 'main'
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: sanity-io/github-action-sanity@v0.7-alpha
  #       env:
  #         SANITY_AUTH_TOKEN: ${{ secrets.SANITY_AUTH_TOKEN }}
  #       with:
  #         args: deploy
