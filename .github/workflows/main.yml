name: 'Staging'

on:
  push:
    branches: ['dev']
    paths-ignore:
      # Ignore changes in documentation.
      - '**/*.md'

      # Ignore changes in root directory.
      - '.gitattributes'
      - '.gitignore'
      - '.markdownlint.json'
      - '.yarnrc.yml'
      - 'LICENSE'
      - '.yarn'
      - '.vscode'
      - '.prettierignore'
      - '.prettierrc'
      - 'LICENSE'
      - 'tsconfig.json'
      - 'eslint.config.mjs'

      # Ignore changes in .github directory.
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.*'

      # Ignore build related files.
      - '.env.example'

      # Ignore frontend package specific paths.
      - 'packages/frontend/static/**'
      - 'packages/frontend/.prettierrc'
      - 'packages/frontend/svelte.config.js'

      # Ignore backend package specific paths.
      - 'packages/backend/static/**'

  pull_request:
    branches: ['dev']
    paths-ignore:
      # Ignore changes in documentation.
      - '**/*.md'

      # Ignore changes in root directory.
      - '.gitattributes'
      - '.gitignore'
      - '.markdownlint.json'
      - '.yarnrc.yml'
      - 'LICENSE'
      - '.yarn'
      - '.vscode'
      - '.prettierignore'
      - '.prettierrc'
      - 'LICENSE'
      - 'tsconfig.json'
      - 'eslint.config.mjs'

      # Ignore changes in .github directory.
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.*'

      # Ignore build related files.
      - '.env.example'

      # Ignore frontend package specific paths.
      - 'packages/frontend/static/**'
      - 'packages/frontend/.prettierrc'
      - 'packages/frontend/svelte.config.js'

      # Ignore backend package specific paths.
      - 'packages/backend/static/**'

jobs:
  changes:
    name: Check changes
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    permissions:
      pull-requests: read
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: dev
          # base: ${{ github.ref_name }}
          list-files: csv
          filters: |
            frontend:
              - 'packages/frontend/**'
            backend:
              - 'packages/backend/**'
      - name: Log all filter results
        run: |
          echo "frontend: ${{ steps.filter.outputs.frontend }}"
          echo "backend: ${{ steps.filter.outputs.backend }}"

  build:
    name: Set yarn and build artifacts
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    outputs:
      yarn_version: ${{ steps.set_yarn_version.outputs.yarn_version }}
    needs: [changes]
    environment: development
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4

      # Retrieve yarn version from package.json
      - name: Get yarn version from package.json
        run: |
          grep 'packageManager' package.json | awk -F: '{gsub(/[", ]/, "", $2); print $2}' | xargs -I {} echo "YARN_VERSION="{} >> "$GITHUB_ENV"

      # Set the yarn version by exporting to env var and output
      - name: Append yarn version to $GITHUB_OUTPUT
        id: set_yarn_version
        run: |
          echo "yarn_version=${{ env.YARN_VERSION }}" >> "$GITHUB_OUTPUT"

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ steps.set_yarn_version.outputs.yarn_version }}
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      # Check if there are any errors in the SvelteKit code.
      - name: SvelteKit check
        if: ${{ needs.changes.outputs.frontend == 'true' && github.event_name == 'pull_request' }}
        run: yarn workspace frontend check

      - name: Build frontend for staging
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend build:development

      - name: Build backend for staging
        if: ${{ needs.changes.outputs.backend == 'true' }}
        run: yarn workspace backend build

      # Cache the build after all is said and done.
      # This build will be used in the following jobs.
      - name: Cache build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

  test-unit:
    name: Unit tests
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    needs: [changes, build]
    if: ${{ github.event_name == 'pull_request' }}
    environment: development
    env:
      SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
      SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
      SANITY_DATASET: ${{ vars.SANITY_STUDIO_DATASET }}
      SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
      YARN_VERSION: ${{ needs.build.outputs.yarn_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Run frontend unit tests
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend test-ci:unit

      - name: Run backend unit tests
        if: ${{ needs.changes.outputs.backend == 'true' }}
        run: yarn workspace backend test-ci:unit

  test-comp:
    name: Component tests
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    needs: [changes, build]
    environment: development
    if: ${{ github.event_name == 'pull_request' }}
    env:
      SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
      SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
      SANITY_DATASET: ${{ vars.SANITY_STUDIO_DATASET }}
      SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
      YARN_VERSION: ${{ needs.build.outputs.yarn_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Run frontend component tests
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend test-ci:components

      # - name: Run backend unit tests
      #   if: ${{ needs.changes.outputs.backend == 'true' }}
      #   run: yarn workspace backend test-ci:unit

  test-int:
    name: Integration tests
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    environment: development
    if: ${{ needs.changes.outputs.frontend == 'true' && github.event_name == 'pull_request' }}
    needs: [changes, build]
    env:
      SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
      SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
      SANITY_DATASET: ${{ vars.SANITY_STUDIO_DATASET }}
      SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
      YARN_VERSION: ${{ needs.build.outputs.yarn_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Install playwright
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend playwright install

      - name: Run frontend integration tests
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend test-ci:integration

  test-func:
    name: Functional tests
    environment: development
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    if: ${{ needs.changes.outputs.frontend == 'true' && github.event_name == 'pull_request' }}
    needs: [changes, build]
    env:
      SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
      SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
      SANITY_DATASET: ${{ vars.SANITY_STUDIO_DATASET }}
      SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
      YARN_VERSION: ${{ needs.build.outputs.yarn_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Install playwright
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend playwright install

      - name: Run frontend functional tests
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend test-ci:functional

  test-e2e:
    name: E2E tests
    environment: development
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    if: ${{ needs.changes.outputs.frontend == 'true' && github.event_name == 'pull_request' }}
    needs: [changes, build]
    env:
      SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
      SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
      SANITY_DATASET: ${{ vars.SANITY_STUDIO_DATASET }}
      SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
      YARN_VERSION: ${{ needs.build.outputs.yarn_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Install playwright
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend playwright install

      - name: Run frontend E2E tests
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: yarn workspace frontend test-ci:e2e

  deploy-development:
    name: Deploy to development environment
    if: ${{ github.event_name == 'push' && github.ref_name == 'dev' }}
    env:
      YARN_VERSION: ${{ needs.build.outputs.yarn_version }}
    runs-on: ubuntu-${{ vars.RUNNER_VERSION }}
    environment: development
    needs: [changes, build]

    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Publish to Cloudflare Pages
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy packages/frontend/.svelte-kit/cloudflare --project-name=website
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      # Deploy backend artifact

  merge-dev-to-staging:
    name: Fast-Forward Merge dev to staging
    if: ${{ github.event_name == 'push' && github.ref_name == 'dev' }}
    needs: deploy-development
    runs-on: ubuntu-${{ vars.RUNNER_VERSION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full history is fetched for merging

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fast-Forward Merge
        run: |
          git checkout staging
          git merge --ff-only origin/dev || {
            echo "Fast-forward merge failed. Ensure dev branch is up-to-date.";
            exit 1;
          }
          git push origin staging

  all-green:
    name: All Green
    if: always()
    runs-on: ubuntu-${{ vars.RUNNER_VERSION }}
    environment: development
    needs:
      [
        build,
        test-unit,
        test-comp,
        test-int,
        test-func,
        test-e2e,
        deploy-development,
        merge-dev-to-staging,
      ]

    steps:
      - if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        run: exit 1
