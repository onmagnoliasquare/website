name: 'Staging'

on:
  push:
    branches: ['dev']
    # paths-ignore:
    #   # Ignore changes in documentation.
    #   - 'docs/**'
    #   - 'README.md'

    #   # Ignore package.json changes.
    #   - 'package.json'

    #   # Ignore changes in root directory.
    #   - '.gitattributes'
    #   - '.gitignore'
    #   - '.markdownlint.json'
    #   - '.yarnrc.yml'
    #   - 'LICENSE'
    #   # Changes to yarn.lock means something was updated...
    #   # - 'yarn.lock'
    #   - '.yarn'
    #   - '.vscode'

    #   # Ignore changes in .github directory.
    #   - '.github/ISSUE_TEMPLATE/**'
    #   - '.github/pull_request_template.*'

    #   # Ignore build related files.
    #   - '.env.example'

    #   # Ignore changes in backend package.
    #   - '.github/workflows/backend.yml'
    #   - 'packages/backend/**'

    #   # Ignore frontend package specific paths.
    #   - 'packages/frontend/static/**'
    #   - 'packages/frontend/.eslintignore'
    #   - 'packages/frontend/.eslintrc.cjs'
    #   - 'packages/frontend/.prettierrc'
    #   - 'packages/frontend/styles/**'
    #   - 'packages/frontend/svelte.config.js'

jobs:
  changes:
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    permissions:
      pull-requests: read
    outputs:
      needs_build: ${{ steps.filter.outputs.needs_build }}
      needs_tests: ${{ steps.filter.outputs.needs_tests }}
      templates: ${{ steps.filter.outputs.templates }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            needs_build:
              - '.github/workflows/**'
              - 'packages/**'
              - 'yarn.lock'
              - 'package.json'
            needs_tests:
              - '.github/workflows/**'
              - 'packages/**'
              - 'yarn.lock'
              - 'package.json'
            needs_frontend_tests:
              - 'packages/frontend/**'
            needs_backend_tests:
              - 'packages/backend/**'
      - name: Log all filter results
        run: |
          echo "needs_build: ${{ steps.filter.outputs.needs_build }}"
          echo "needs_tests: ${{ steps.filter.outputs.needs_tests }}"
          echo "needs_frontend_tests: ${{ steps.filter.outputs.needs_tests }}"

  set-environment:
    name: Set CI Environment
    # Should be same as Cloudflare Page's build system version.
    # https://github.com/actions/runner-images
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    outputs:
      current_env: ${{ steps.set_env.outputs.current_env }}
    steps:
      - name: Check if development
        if: github.ref_name == 'dev'
        run: |
          echo "ENVIRONMENT_NAME=staging" >> "$GITHUB_ENV"

      # Original: https://magnussundstrom.se/blog/github-action-environment-check
      # Edited, due to: https://github.blog/changelog/2023-07-24-github-actions-update-on-save-state-and-set-output-commands/
      # Solution derived from: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-writing-an-environment-variable-to-github_env
      - name: Set environment
        id: set_env
        run: echo "current_env=${{ env.ENVIRONMENT_NAME }}" >> "$GITHUB_ENV"

  # Setup and build the yarn cache for the rest of the jobs.
  # Also exports yarn version from package.json.
  setup:
    name: Setup and Build
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    outputs:
      yarn_version: ${{ steps.set_yarn_version.outputs.yarn_version }}
    environment: ${{ needs.set-environment.outputs.current_env }}
    needs: [set-environment]
    steps:
      - uses: actions/checkout@v4

      # Retrieve yarn version from package.json
      - name: Get yarn version from package.json
        run: |
          grep 'packageManager' package.json | awk -F: '{gsub(/[", ]/, "", $2); print $2}' | xargs -I {} echo "YARN_VERSION="{} >> "$GITHUB_ENV"

      # Set the yarn version by exporting to env var and output
      - name: Append yarn version to $GITHUB_OUTPUT
        id: set_yarn_version
        run: |
          echo "yarn_version=${{ env.YARN_VERSION }}" >> "$GITHUB_OUTPUT"

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ steps.set_yarn_version.outputs.yarn_version }}
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      # Check if there are any errors in the SvelteKit code.
      - name: Run SvelteKit Check
        run: yarn check:front

      - run: yarn build:front

      # Cache the build after all is said and done.
      # This build will be used the following jobs.
      - name: Cache build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

  # lint:
  #   runs-on: ubuntu-${{vars.RUNNER_VERSION}}
  #   needs: setup
  #   env:
  #     YARN_VERSION: ${{ needs.setup.outputs.yarn_version }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Node setup
  #       uses: ./.github/actions/setup
  #       with:
  #         node-version: ${{ vars.NODE_VERSION }}
  #         yarn-version: ${{ env.YARN_VERSION  }}
  #         yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

  #     - name: Lint staged
  #       run: |
  #         git diff --name-only --diff-filter=d origin/${GITHUB_BASE_REF}...${GITHUB_SHA}
  #         npx lint-staged --diff="origin/${GITHUB_BASE_REF}...${GITHUB_SHA}"

  # Run unit, component, and E2E tests.
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    # Maybe can also use:
    # https://github.com/orgs/community/discussions/56123#discussioncomment-5968189
    environment: ${{ needs.set-environment.outputs.current_env }}
    needs: setup
    env:
      SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
      SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
      SANITY_DATASET: ${{ vars.SANITY_DATASET }}
      SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
      YARN_VERSION: ${{ needs.setup.outputs.yarn_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      # Run unit tests.
      - name: Run frontend unit tests
        run: yarn workspace frontend test:ci-no-pool

  # test-functional:
  #   runs-on: ubuntu-${{vars.RUNNER_VERSION}}
  #   environment: ${{ needs.set-environment.outputs.current_env }}
  #   needs: setup
  #   env:
  #     SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
  #     SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
  #     SANITY_DATASET: ${{ vars.SANITY_DATASET }}
  #     SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
  #     YARN_VERSION: ${{ needs.setup.outputs.yarn_version }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Use Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ vars.NODE_VERSION }}

  #       # Use corepack
  #     - name: Enable corepack
  #       run: corepack enable

  #     - name: Install yarn
  #       run: corepack install --global ${{ env.YARN_VERSION }}

  #     - name: Set yarn version
  #       run: corepack use  ${{ env.YARN_VERSION }}

  #       # ================================================ #
  #       #  Retrieve cached dependencies from previous job  #
  #       # ================================================ #

  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "dir=$(yarn config get cacheFolder)" >> "$GITHUB_OUTPUT"

  #     - uses: actions/cache@v4
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-

  #       # ============================================== #
  #       # ############################################## #
  #       # ============================================== #

  #       # Run unit tests.
  #     - name: Run frontend tests
  #       run: yarn test-ci:front

  # test-int:
  #   runs-on: ubuntu-${{vars.RUNNER_VERSION}}
  #   environment: ${{ needs.set-environment.outputs.current_env }}
  #   needs: setup
  #   env:
  #     SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
  #     SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
  #     SANITY_DATASET: ${{ vars.SANITY_DATASET }}
  #     SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
  #     YARN_VERSION: ${{ needs.setup.outputs.yarn_version }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Use Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ vars.NODE_VERSION }}

  #       # Use corepack
  #     - name: Enable corepack
  #       run: corepack enable

  #     - name: Install yarn
  #       run: corepack install --global ${{ env.YARN_VERSION }}

  #     - name: Set yarn version
  #       run: corepack use  ${{ env.YARN_VERSION }}

  #       # ================================================ #
  #       #  Retrieve cached dependencies from previous job  #
  #       # ================================================ #

  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "dir=$(yarn config get cacheFolder)" >> "$GITHUB_OUTPUT"

  #     - uses: actions/cache@v4
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-

  #       # ============================================== #
  #       # ############################################## #
  #       # ============================================== #

  #     - name: Install playwright
  #       run: yarn playwright install

  #       # Run unit tests.
  #     - name: Run frontend tests
  #       run: yarn test-ci:front

  # test-e2e:
  #   runs-on: ubuntu-${{vars.RUNNER_VERSION}}
  #   environment: ${{ needs.set-environment.outputs.current_env }}
  #   needs: setup
  #   env:
  #     SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
  #     SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
  #     SANITY_DATASET: ${{ vars.SANITY_DATASET }}
  #     SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
  #     YARN_VERSION: ${{ needs.setup.outputs.yarn_version }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Use Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ vars.NODE_VERSION }}

  #       # Use corepack
  #     - name: Enable corepack
  #       run: corepack enable

  #     - name: Install yarn
  #       run: corepack install --global ${{ env.YARN_VERSION }}

  #     - name: Set yarn version
  #       run: corepack use  ${{ env.YARN_VERSION }}

  #       # ================================================ #
  #       #  Retrieve cached dependencies from previous job  #
  #       # ================================================ #

  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "dir=$(yarn config get cacheFolder)" >> "$GITHUB_OUTPUT"

  #     - uses: actions/cache@v4
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-

  #       # ============================================== #
  #       # ############################################## #
  #       # ============================================== #

  #     - name: Install playwright
  #       run: yarn playwright install

  #       # Run unit tests.
  #     - name: Run frontend tests
  #       run: yarn test-ci:front

  all-green:
    name: All Green
    if: always()
    runs-on: ubuntu-24.04
    needs: [setup, test-unit]

    steps:
      - if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        run: exit 1

  publish-staging:
    name: Publish Staging
    runs-on: ubuntu-${{ vars.RUNNER_VERSION }}
    needs: [set-environment, setup, all-green]
    environment: ${{ needs.set-environment.outputs.current_env }}
    if: ${{ needs.all-green.result == 'success' && github.ref_name == 'dev' }}
    env:
      SANITY_PROJECT_ID: ${{ vars.SANITY_PROJECT_ID }}
      SANITY_API_VERSION: ${{ vars.SANITY_API_VERSION }}
      SANITY_DATASET: ${{ vars.SANITY_DATASET }}
      SANITY_DEVELOPER_TOKEN: ${{ secrets.SANITY_DEVELOPER_TOKEN }}
      YARN_VERSION: ${{ needs.setup.outputs.yarn_version }}
    permissions:
      contents: read
      deployments: write

    steps:
      - uses: actions/checkout@v4

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      # Deploy using wrangler CLI
      # See: https://github.com/cloudflare/wrangler-action?tab=readme-ov-file#deploy-your-pages-site-production--preview
      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy packages/frontend/.svelte-kit/cloudflare --project-name=website
