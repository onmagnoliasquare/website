name: Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Select deployment (frontend or backend)'
        required: true
        default: 'frontend'
        type: choice
        options:
          - frontend
          - backend

jobs:
  build:
    name: Set yarn and build artifacts
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    outputs:
      yarn_version: ${{ steps.set_yarn_version.outputs.yarn_version }}
    environment: staging
    steps:
      - uses: actions/checkout@v4

      # Retrieve yarn version from package.json
      - name: Get yarn version from package.json
        run: |
          grep 'packageManager' package.json | awk -F: '{gsub(/[", ]/, "", $2); print $2}' | xargs -I {} echo "YARN_VERSION="{} >> "$GITHUB_ENV"

      # Set the yarn version by exporting to env var and output
      - name: Append yarn version to $GITHUB_OUTPUT
        id: set_yarn_version
        run: |
          echo "yarn_version=${{ env.YARN_VERSION }}" >> "$GITHUB_OUTPUT"

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ steps.set_yarn_version.outputs.yarn_version }}
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Build frontend for development
        if: ${{ inputs.deployment_target == 'frontend' }}
        run: yarn workspace frontend build:staging

      - name: Build backend for development
        if: ${{ inputs.deployment_target == 'backend' }}
        run: yarn workspace backend build

      # Cache the build after all is said and done.
      # This build will be used in the following jobs.
      - name: Cache build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

  deploy:
    name: Deploy target
    runs-on: ubuntu-${{vars.RUNNER_VERSION}}
    needs: build
    env:
      YARN_VERSION: ${{ needs.build.outputs.yarn_version }}
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ vars.NODE_VERSION }}
          yarn-version: ${{ env.YARN_VERSION  }}
          yarn-run-install: false
          yarn-restore-cache: false # We restore the build from actions/cache
          yarn-install-cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Publish frontend to Cloudflare Pages
        if: ${{ inputs.deployment_target == 'frontend' }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy packages/frontend/.svelte-kit/cloudflare --project-name=website
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      # Deploy backend artifact
      - name: Publish backend to Cloudflare Pages
        if: ${{ inputs.deployment_target == 'backend' }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy packages/backend/dist --project-name=backend
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
